import datetime
import time
from aiogram import Dispatcher, types
from create_bot import dp, bot
from mail.send_email import send_letter
from database.sqlite_db import UnregisteredTable, BotUsersTable
from keyboards.client_kb import *
from config import mail_hr_department, chat_id, mail_ndfl


async def main_menu(call: types.CallbackQuery):
    if await ignore_message_from_call(call):
        return
    await call.message.answer(text="üí¨ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=kb_client_docs)


async def docs_menu(call: types.CallbackQuery):
    if await ignore_message_from_call(call):
        return
    await call.message.answer(text="üí¨ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=kb_client_docs)


@dp.message_handler(content_types=["new_chat_members"])
async def greetings_to_new_member(message: types.Message):
    if message.chat.id == chat_id:
        if await BotUsersTable.is_user_exists(message.chat.id):
            return
        await UnregisteredTable.add_user(message.from_user.id)
        print("New user in chat: ", message.from_user.id)


@dp.message_handler(text='my_id')
async def get_id(message: types.Message):
    await bot.send_message(message.from_user.id, message.chat.id)


@dp.message_handler(text=btn_news_n_navigator.text)
async def news_n_navigator(message: types.Message):
    """
    :param message:
    :return:

    –ù–æ–≤–æ—Å—Ç–∏, –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """
    if await BotUsersTable.is_user_exists(message.from_user.id):
        if await ignore_message_from(message):
            return
        message1 = 'üí¨ –•–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–Ω—É—Ç—Ä–∏–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏?\n\n' \
                   '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: map.iteco-inno.ru\n\n' \
                   '–ê –µ—â–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É –Ω–∞—Å –µ—Å—Ç—å:\n\n' \
                   '–¢–ì-–∫–∞–Ω–∞–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä:\nhttps://t.me/+R5gPs1cjZQdQx2ns\n' \
                   '–ß–∞—Ç-–±–æ–ª—Ç–∞–ª–∫–∞:\nhttps://t.me/+WNcLX2cflpA1MWNi\n\n' \
                   'üåê –°–æ—Ü—Å–µ—Ç–∏\n' \
                   'üí¨ –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!\n\n' \
                   'VK: clck.ru/qBmBw\n' \
                   'YouTube: clck.ru/ovNJv\n' \
                   'Telegram –∫–æ–º–ø–∞–Ω–∏–∏: https://t.me/iciteco_official\n'
        await bot.send_message(message.from_user.id, message1, reply_markup=kb_news_n_navigator)


@dp.message_handler(text=btn_knowlage_base.text)
async def knowledge_base(message: types.Message):
    if await BotUsersTable.is_user_exists(message.from_user.id):
        if await ignore_message_from(message):
            return
        message1 = 'üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π\n' \
                   'üí¨ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∏–Ω–∏-–∫—É—Ä—Å—ã –ø–æ soft skills & hard skills?\n\n' \
                   '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n' \
                   'map.iteco-inno.ru/it-courses'
        await bot.send_message(message.from_user.id, message1, reply_markup=kb_client)


async def send_ndfl_request(call: types.CallbackQuery):
    if await ignore_message_from_call(call):
        return
    letter_full_name = await BotUsersTable.get_user_full_name(call.from_user.id)
    letter_email = await BotUsersTable.get_user_email(call.from_user.id)
    letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –°–ø—Ä–∞–≤–∫—É 2–ù–î–§–õ'
    letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –°–ø—Ä–∞–≤–∫—É 2–ù–î–§–õ\r\n\n" \
                  f"–§–ò–û: {letter_full_name}\n\n" \
                  f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
    # TODO
    await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
    await call.answer(text="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
    time.sleep(2)
    await call.message.answer('üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


async def send_unpaid_vacation_request(call: types.CallbackQuery):
    if await ignore_message_from_call(call):
        return
    letter_full_name = await BotUsersTable.get_user_full_name(call.from_user.id)
    letter_email = await BotUsersTable.get_user_email(call.from_user.id)
    letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è'
    letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è\r\n\n" \
                  f"–§–ò–û: {letter_full_name}\n\n" \
                  f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}\n\n" \
                  f"–®–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è: –ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫"
    await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
    await call.answer(text="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
    time.sleep(2)
    await call.message.answer('üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


async def send_paid_vacation_request(call: types.CallbackQuery):
    if await ignore_message_from_call(call):
        return
    letter_full_name = await BotUsersTable.get_user_full_name(call.from_user.id)
    letter_email = await BotUsersTable.get_user_email(call.from_user.id)
    letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è'
    letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è\r\n\n" \
                  f"–§–ò–û: {letter_full_name}\n\n" \
                  f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}\n\n" \
                  f"–®–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è: –û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫"
    await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
    await call.answer(text="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
    time.sleep(2)
    await call.message.answer('üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


@dp.message_handler(text=btn_reference.text)
async def reference(message: types.Message):
    if await ignore_message_from(message):
        return
    if await BotUsersTable.is_user_exists(message.from_user.id):
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø—Ä–∞–≤–∫—É —Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã'
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø—Ä–∞–≤–∫—É —Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
        await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
        await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await bot.send_message(message.from_user.id, 'üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


@dp.message_handler(text=btn_reference_with_income.text)
async def reference_with_income(message: types.Message):
    if await ignore_message_from(message):
        return
    if await BotUsersTable.is_user_exists(message.from_user.id):
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø—Ä–∞–≤–∫—É —Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã'
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø—Ä–∞–≤–∫—É —Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã c –¥–æ—Ö–æ–¥–æ–º\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
        await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
        await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await bot.send_message(message.from_user.id, 'üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


@dp.message_handler(text=btn_tk_copy.text)
async def copy_employment_tk(message: types.Message):
    if await ignore_message_from(message):
        return
    if await BotUsersTable.is_user_exists(message.from_user.id):
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–ø–∏—é —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏'
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–ø–∏—é —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä–µ–Ω–Ω–∞—è\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
        await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
        await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await bot.send_message(message.from_user.id, 'üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


@dp.message_handler(text=btn_tk_copy_approved.text)
async def copy_employment_tk_approved(message: types.Message):
    if await ignore_message_from(message):
        return
    if await BotUsersTable.is_user_exists(message.from_user.id):
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–ø–∏—é —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏'
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–ø–∏—é —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏ –∑–∞–≤–µ—Ä–µ–Ω–Ω–∞—è\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
        await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
        await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await bot.send_message(message.from_user.id, 'üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


@dp.message_handler(text=btn_ndfl.text)
async def get_ndfl(message: types.Message):
    if await ignore_message_from(message):
        return
    if await BotUsersTable.is_user_exists(message.from_user.id):
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –°–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ'
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –°–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
        await send_letter(mail_ndfl, letter_email, letter_subject, letter_text)
        await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await bot.send_message(message.from_user.id, 'üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


@dp.message_handler(text='–û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫')
async def get_paid(message: types.Message):
    if await ignore_message_from(message):
        return
    if await BotUsersTable.is_user_exists(message.from_user.id):
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫'
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
        await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
        await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await bot.send_message(message.from_user.id, 'üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


@dp.message_handler(text='–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫')
async def get_unpaid(message: types.Message):
    if await ignore_message_from(message):
        return
    if await BotUsersTable.is_user_exists(message.from_user.id):
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫'
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {letter_email}"
        await send_letter(mail_hr_department, letter_email, letter_subject, letter_text)
        await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await bot.send_message(message.from_user.id, 'üí¨ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=kb_client)


async def ignore_message_from(message: types.Message) -> bool:
    if message.chat.id == chat_id:
        return True
    else:
        return False


async def ignore_message_from_call(call: types.CallbackQuery) -> bool:
    if call.message.chat.id == chat_id:
        return True
    else:
        return False


def register_callback_query(dp: Dispatcher):
    dp.register_callback_query_handler(main_menu, text='main_menu')
    dp.register_callback_query_handler(docs_menu, text='docs_menu')
    dp.register_callback_query_handler(send_ndfl_request, text='ndfl_request')
    dp.register_callback_query_handler(send_unpaid_vacation_request, text='unpaid_vacation_request')
    dp.register_callback_query_handler(send_paid_vacation_request, text='paid_vacation_request')
