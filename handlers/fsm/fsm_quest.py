import time
from database.sqlite_db import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from mail.send_email import send_letter
from keyboards.client_kb import kb_client, kb_client_docs


class FSMQuest(StatesGroup):
    numbers_of_sections = State()
    support_email = State()
    secret_word = State()


async def cm_start_quest(message: types.Message):
    if await BotUsersTable.is_user_exists(message.from_user.id) is not True:
        await message.answer('<b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</b>\n\n'
                             '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                             reply_markup=types.ReplyKeyboardRemove())
    else:
        await FSMQuest.numbers_of_sections.set()
        await message.answer('<b>üéØ –ó–∞–¥–∞–Ω–∏–µ <i>1/3</i></b>\n'
                             '–ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –≤ —à–∞–ø–∫–µ –Ω–∞ —Å–∞–π—Ç–µ map.iteco-inno.ru\n\n'
                             '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä—É\n\n'
                             '<i>–æ—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç - /cancel</i>', reply_markup=types.ReplyKeyboardRemove())


async def cancel_quest(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('üí¨ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=kb_client)


async def load_numbers_of_sections(message: types.Message, state: FSMContext):
    if message.text == '4' or message.text == '—á–µ—Ç—ã—Ä–µ' or message.text == '–ß–µ—Ç—ã—Ä–µ':
        async with state.proxy() as data:
            data['numbers_of_sections'] = message.text
        await FSMQuest.next()
        await message.answer('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!')
        await message.answer('<b>üéØ –ó–∞–¥–∞–Ω–∏–µ <i>2/3</i></b>\n'
                             '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Ç–≥: t.me/+R5gPs2m10UbiyXL3\n\n'
                             'üìå –í –æ–¥–Ω–æ–º –∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ\n\n'
                             '–ù–∞ –∫–∞–∫—É—é –ø–æ—á—Ç—É —Å–ª–µ–¥—É–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä?\n\n'
                             '<i>–æ—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç - /cancel</i>', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n'
                             '<i>–æ—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç - /cancel</i>')
        return


async def load_support_email(message: types.Message, state: FSMContext):
    if message.text == 'support@iteco-inno.ru' or message.text == 'Support@iteco-inno.ru':
        async with state.proxy() as data:
            data['support_email'] = message.text
        await FSMQuest.next()
        await message.answer('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!')
        await message.answer('<b>üéØ –ó–∞–¥–∞–Ω–∏–µ <i>3/3</i></b>\n'
                             '–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ VK: clck.ru/rcQfC\n\n'
                             '–í–∞—à –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç!\n\n'
                             '<i>–æ—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç - /cancel</i>', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n'
                             '<i>–æ—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç - /cancel</i>')
        return


async def load_secret_word(message: types.Message, state: FSMContext):
    if message.text == '–∏–Ω–Ω–æ–≤–∞—Ü–∏—è' or message.text == '–ò–Ω–Ω–æ–≤–∞—Ü–∏—è':
        async with state.proxy() as data:
            data['secret_word'] = message.text
        await message.answer('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!')
        await message.answer('üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å—Ç–∞–ª–∏ —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã –ì–ö –ò–¶ –ê–π–¢–µ–∫–æ!\n\n'
                             '–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ –ø–æ—á—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞')
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞'
        letter_text = "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞: {letter_email}\n\n" \
                      f"–ö–æ–ª-–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ: {data['numbers_of_sections']}\n\n" \
                      f"–ö–æ–º—É –ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø: {data['support_email']}\n\n" \
                      f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: {data['secret_word']}\n\n"
        await send_letter('a.reznik@iteco-inno.ru', letter_email, letter_subject, letter_text)
        # await send_letter('sallings@i-teco.ru', letter_email, letter_subject, letter_text)
    else:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n'
                             '<i>–æ—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç - /cancel</i>')
        return

    await state.finish()
    time.sleep(2)
    await message.answer('üí¨ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=kb_client)


def register_handlers_fsm_quest(dp: Dispatcher):
    dp.register_message_handler(cm_start_quest, Text(equals='üéÅ –ü—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç'), state=None)
    dp.register_message_handler(cancel_quest, state="*", commands=['cancel'])
    dp.register_message_handler(load_numbers_of_sections, state=FSMQuest.numbers_of_sections)
    dp.register_message_handler(load_support_email, state=FSMQuest.support_email)
    dp.register_message_handler(load_secret_word, state=FSMQuest.secret_word)
