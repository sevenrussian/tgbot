import time
from database.sqlite_db import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from mail.send_email import send_letter
from keyboards.client_kb import kb_client


class FSMRecoveryEmail(StatesGroup):
    email_for_answer = State()


async def cm_start3(message: types.Message, state: FSMContext):
    if await BotUsersTable.is_user_exists(message.from_user.id) is not True:
        await message.answer('<b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</b>\n\n'
                             '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', reply_markup=types.ReplyKeyboardRemove())
    else:
        await FSMRecoveryEmail.email_for_answer.set()
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ª–∏—á–Ω—É—é –ø–æ—á—Ç—É</b>\n'
                             '–ù–∞ –Ω–µ–µ –ø—Ä–∏–¥–µ—Ç –ø–∏—Å—å–º–æ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞\n\n'
                             '<i>–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É - /cancel</i>', reply_markup=types.ReplyKeyboardRemove())


async def load_email_for_answer(message: types.Message, state: FSMContext):
    if '@' in message.text and '.' in message.text:
        async with state.proxy() as data:
            data['email_for_answer'] = message.text
        letter_full_name = await BotUsersTable.get_user_full_name(message.from_user.id)
        letter_email = await BotUsersTable.get_user_email(message.from_user.id)
        letter_subject = '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ—á—Ç—ã'
        letter_reply_email = data['email_for_answer']
        letter_text = "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—á—Ç–µ\r\n\n" \
                      f"–§–ò–û: {letter_full_name}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {letter_email}\n\n" \
                      f"–ü–æ—á—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {data['email_for_answer']}\n\n"
        await send_letter('ic-sys-admin@iteco-inno.ru', letter_reply_email, letter_subject, letter_text)
        await message.answer('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n'
                             f'–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏, –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –Ω–∞ –ø–æ—á—Ç—É {data["email_for_answer"]}',
                             reply_markup=types.ReplyKeyboardRemove())
        await state.finish()  # –±–æ—Ç –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –û–ß–ò–©–ê–ï–¢ –í–ï–°–¨ –°–õ–û–í–ê–†–¨
        time.sleep(2)
        await message.answer('üí¨ –ß–µ–º –µ—â–µ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=kb_client)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é</b> –ø–æ—á—Ç—É\n\n')
        return


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('üí¨ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=kb_client)


def register_handlers_fsm_recovery_email(dp: Dispatcher):
    dp.register_message_handler(cm_start3, Text(equals='‚úâ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ—á—Ç—ã'), state=None)
    dp.register_message_handler(cancel_handler, state="*", commands=['cancel'])
    dp.register_message_handler(load_email_for_answer, state=FSMRecoveryEmail.email_for_answer)
