import time
import math
import random
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from keyboards.client_kb import kb_client
from mail.send_email import send_letter
from database.sqlite_db import *
import re
from string import ascii_letters
from handlers.admin_handler import *
from handlers.client_handler import ignore_message_from
import datetime


class FSMRegistration(StatesGroup):
    full_name = State()
    email = State()
    user_OTP = State()
# TODO:

async def cmd_start(message: types.Message):
    if await ignore_message_from(message):
        return

    if (await BotUsersTable.is_user_exists(message.from_user.id)) and (
    await BotUsersTable.is_user_has_email(message.from_user.id)):

        await message.answer('üí¨ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=kb_client)
    else:

        await FSMRegistration.email.set()
        await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ú–∞–Ω—É–ª - –ø–æ–º–æ—â–Ω–∏–∫ –ò–¶ –ê–π-–¢–µ–∫–æ\n\n"
                            "–Ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n\n"
                            "<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É</b>\n\n"
                            "–ù–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                            "<i>–Ω–µ –∑–Ω–∞–µ—Ç–µ –ø–æ—á—Ç—É?</i>\n"
                            "<i>–Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –ø—Ä–æ–µ–∫—Ç–∞</i>\n\n"
                            "<i>–Ω–µ –∑–Ω–∞–µ—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞?</i>\n"
                            "<i>–Ω–∞–ø–∏—à–∏—Ç–µ @ic_iteco</i>", reply_markup=types.ReplyKeyboardRemove())


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Cancelled.', reply_markup=types.ReplyKeyboardRemove())


async def has_cyrillic(text):
    return bool(re.search('[–∞-—è–ê-–Ø]', text))


async def has_english(text):
    return bool(re.search('[a-zA-Z]', text))


async def has_number(text):
    return bool(re.search('[0-9]', text))


async def load_email(message: types.Message, state: FSMContext):
    if ('@iteco-inno.ru' in message.text or '@i-teco.ru' in message.text) and (
            await has_cyrillic(message.text) is False) \
            and await has_number(message.text) is False and (message.text != '@iteco-inno.ru') and (
            message.text != '@i-teco.ru') \
            and (message.text != '@@i-teco-inno.ru') and (message.text != '@@i-teco.ru') and ',' not in message.text:

        if await is_user_email_active(message.text.strip()):
            async with state.proxy() as data:
                data['tg_id'] = message.from_user.id
            async with state.proxy() as data:
                data['full_name'] = await get_username_from_ad(message.text)
            await FSMRegistration.next()
            async with state.proxy() as data:
                data['email'] = message.text
            user_email = data['email']
            digits = "0123456789"
            OTP = ""
            otp_message = ""
            for i in range(6):
                OTP += digits[math.floor(random.random() * 10)]
                print(OTP)
            otp_message = "–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: " + OTP
            async with state.proxy() as data:
                data['otp_message'] = OTP
            global otp_code
            otp_code = OTP
            letter_subject = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏'
            await send_letter(f"{user_email}", f"{user_email}", letter_subject, str(otp_message))
            await message.reply(f"–ù–∞ –ø–æ—á—Ç—É {data['email']} –±—ã–ª –≤—ã—Å–ª–∞–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                                f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
                                f"<i>–Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ - /retry</i>")
        else:
            await bot.send_message(message.from_user.id,
                                   "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω(\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—á—Ç—ã –ª–∏–±–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        return


async def process_user_OTP(message: types.Message, state: FSMContext):
    if message.text != otp_code:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n'
                             '<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n')
        return
    else:
        async with state.proxy() as data:
            data['user_OTP'] = message.text
        markup = types.ReplyKeyboardRemove()
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')

        await UnregisteredTable.delete_user(message.from_user.id)

        async with state.proxy() as data:
            data['joing_date'] = datetime.datetime.now()

        await BotUsersTable.add_user(state)
        await state.finish()

        markup_how_long = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup_how_long.add("–ë–æ–ª–µ–µ 3-—Ö –º–µ—Å—è—Ü–µ–≤")
        markup_how_long.add("–ú–µ–Ω–µ–µ 3-—Ö –º–µ—Å—è—Ü–µ–≤")

        await message.answer('üí¨ –ö–∞–∫ –¥–æ–ª–≥–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏?', reply_markup=markup_how_long)


async def cancel_registration_handler(message: types.Message, state: FSMContext):
    if await BotUsersTable.is_user_exists(message.from_user.id) is not True:
        await message.answer('<b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</b>\n\n'
                             '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', reply_markup=types.ReplyKeyboardRemove())
    else:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.answer('üí¨ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=kb_client)


def register_handlers_fsm_registration(dp: Dispatcher):
    dp.register_message_handler(cmd_start, state=None, commands=['start'])
    dp.register_message_handler(cmd_start, state='*', commands=['retry'])
    dp.register_message_handler(load_email, state=FSMRegistration.email)
    dp.register_message_handler(process_user_OTP, state=FSMRegistration.user_OTP)
